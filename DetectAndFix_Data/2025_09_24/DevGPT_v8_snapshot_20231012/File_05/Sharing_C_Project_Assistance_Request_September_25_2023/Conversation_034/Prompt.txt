my team.cs public class Team
{
    public string Abbreviation { get; set; }
    public string FullName { get; set; }
    public string SpecialRanking { get; set; }
    public int Position { get; set; }
    public int GamesPlayed { get; set; }
    public int GamesWon { get; set; }
    public int GamesDrawn { get; set; }
    public int GamesLost { get; set; }
    public int GoalsFor { get; set; }
    public int GoalsAgainst { get; set; }
    public int GoalDifference => GoalsFor - GoalsAgainst;
    public int Points { get; set; }
    public Streak CurrentStreak { get; set; }

    public Team()
    {
        CurrentStreak = new Streak();
    }

    public Team(string abbreviation, string fullName, string specialRanking)
    {
        Abbreviation = abbreviation;
        FullName = fullName;
        SpecialRanking = specialRanking;
        Position = 0;
        GamesPlayed = 0;
        GamesWon = 0;
        GamesDrawn = 0;
        GamesLost = 0;
        GoalsFor = 0;
        GoalsAgainst = 0;
        Points = 0;
        CurrentStreak = new Streak();
    }

    public class Streak
    {
        public int Wins { get; set; }
        public int Draws { get; set; }
        public int Losses { get; set; }
    }

    public override string ToString()
    {
        return $"Wins: {CurrentStreak.Wins}, Draws: {CurrentStreak.Draws}, Losses: {CurrentStreak.Losses}";
    }
}
leaguestadings.cs using System;
using System.Collections.Generic;
using System.Linq;

public class LeagueStandings
{
    private List<Team> teams;

    public LeagueStandings(List<Team> teams)
    {
        this.teams = teams;
    }

    public List<Team> CalculateStandings()
    {
        var orderedStandings = teams.OrderByDescending(team => team.Points)
                                    .ThenByDescending(team => team.GoalDifference)
                                    .ThenByDescending(team => team.GoalsFor)
                                    .ToList();

        for (int i = 0; i < orderedStandings.Count; i++)
        {
            orderedStandings[i].Position = i + 1;
        }

        return orderedStandings;
    }

public void PrintStandings()
{
    var standings = CalculateStandings();

    Console.WriteLine("League Standings:");
    Console.WriteLine("{0,-5} {1,-25} {2,-10} {3,-10} {4,-10} {5,-10} {6,-10} {7,-10} {8,-10} {9,-10} {10,-10}",
                      "Pos", "Team", "Pts", "GP", "W", "D", "L", "GF", "GA", "GD", "Streak");

    foreach (var team in standings)
    {
        string specialMarking = "";

        // Add special marking for CL, EL, EC qualification
        if (team.Position <= 1)
            specialMarking = "(CL)";
        else if (team.Position <= 3)
            specialMarking = "(EL)";
        else if (team.Position <= 6)
            specialMarking = "(EC)";

        // Add coloring for relegation-threatened teams
        string textColor = "white";
        if (team.Position >= teams.Count - 1)
            textColor = "red";

        Console.WriteLine($"<color={textColor}>{team.Position,-5} {specialMarking} {team.FullName,-25} {team.Points,-10} {team.GamesPlayed,-10} {team.GamesWon,-10} {team.GamesDrawn,-10} {team.GamesLost,-10} {team.GoalsFor,-10} {team.GoalsAgainst,-10} {team.GoalDifference,-10} {team.CurrentStreak,-10}</color>");
    }
}
}
 csvreader.cs using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualBasic.FileIO;

public class FootballCsvReader
{
    public static List<Team> ReadCsv(string filePath)
    {
        List<Team> teams = new List<Team>();

        using (TextFieldParser parser = new TextFieldParser(filePath))
        {
            parser.TextFieldType = FieldType.Delimited;
            parser.SetDelimiters(",");

            // Skip the header line
            parser.ReadLine();

            while (!parser.EndOfData)
            {
                string[] fields = parser.ReadFields();

                if (fields.Length != 12)
                {
                    Console.WriteLine($"Skipping invalid line: {string.Join(",", fields)}");
                    continue;
                }

                Team team = new Team();

                try
                {
                    team.Abbreviation = fields[0];
                    team.FullName = fields[1];
                    team.SpecialRanking = string.IsNullOrEmpty(fields[2]) ? string.Empty : fields[2].Trim();
                    team.Position = int.Parse(fields[3]);
                    team.GamesPlayed = int.Parse(fields[4]);
                    team.GamesWon = int.Parse(fields[5]);
                    team.GamesDrawn = int.Parse(fields[6]);
                    team.GamesLost = int.Parse(fields[7]);
                    team.GoalsFor = int.Parse(fields[8]);
                    team.GoalsAgainst = int.Parse(fields[9]);
                    team.Points = int.Parse(fields[10]);

                    // Parse the CurrentStreak property correctly
                    string streak = fields[11];
                    if (!string.IsNullOrEmpty(streak) && streak.Length >= 2)
                    {
                        char streakResult = streak[0];
                        int streakValue = int.Parse(streak.Substring(1));

                        if (streakResult == 'W')
                        {
                            team.CurrentStreak = new Team.Streak { Wins = streakValue };
                        }
                        else if (streakResult == 'D')
                        {
                            team.CurrentStreak = new Team.Streak { Draws = streakValue };
                        }
                        else if (streakResult == 'L')
                        {
                            team.CurrentStreak = new Team.Streak { Losses = streakValue };
                        }
                    }
                    else
                    {
                        // Handle the case where the streak value is not in the expected format
                        // You can set a default streak or handle it as needed.
                        team.CurrentStreak = new Team.Streak(); // Default streak with 0 wins, draws, and losses
                    }

                    teams.Add(team);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing line: {string.Join(",", fields)}");
                    Console.WriteLine(ex.Message);
                }
            }
        }

        return teams;
    }
}
program.cs using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
{
    // Load setup data from setup.csv
    string setupFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\setup.csv";
    LeagueSetup leagueSetup = LeagueSetup.ParseSetupCsv(setupFilePath);

    if (leagueSetup == null)
    {
        Console.WriteLine("Unable to load league setup. Exiting...");
        return;
    }

    // Load team data from teams.csv
    string teamFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\teams.csv";
    List<Team> teams = FootballCsvReader.ReadCsv(teamFilePath);

    if (teams == null)
    {
        Console.WriteLine("Unable to load team data. Exiting...");
        return;
    }

    // Create an instance of FootballProcessor
    FootballProcessor processor = new FootballProcessor(teams, leagueSetup);

    bool exit = false;
    while (!exit)
    {
        Console.WriteLine("Football Processor Menu:");
        Console.WriteLine("1. Print Teams");
        Console.WriteLine("2. Run Matches");
        Console.WriteLine("3. Display Current League Standings");
        Console.WriteLine("4. Simulate all matches");
        Console.WriteLine("5. Exit");
        Console.Write("Enter your choice: ");

        if (int.TryParse(Console.ReadLine(), out int choice))
        {
            switch (choice)
            {
                case 1:
                    // Print teams and their details
                    foreach (var team in teams)
                    {
                        Console.WriteLine($"Abbreviation: {team.Abbreviation}");
                        Console.WriteLine($"Full Name: {team.FullName}");
                        Console.WriteLine($"Special Ranking: {team.SpecialRanking}");
                        Console.WriteLine($"Position: {team.Position}");
                        Console.WriteLine($"Games Played: {team.GamesPlayed}");
                        Console.WriteLine($"Games Won: {team.GamesWon}");
                        Console.WriteLine($"Games Drawn: {team.GamesDrawn}");
                        Console.WriteLine($"Games Lost: {team.GamesLost}");
                        Console.WriteLine($"Goals For: {team.GoalsFor}");
                        Console.WriteLine($"Goals Against: {team.GoalsAgainst}");
                        Console.WriteLine($"Goal Difference: {team.GoalDifference}");
                        Console.WriteLine($"Points: {team.Points}");
                        Console.WriteLine($"Current Streak: {team.CurrentStreak}");
                        Console.WriteLine();
                    }
                    break;

                case 2:
                    // Implement logic to run matches based on round files
                    Console.Write("Enter the round file name (e.g., round-1.csv): ");
                    string roundFileName = Console.ReadLine();
                    string roundFilePath = Path.Combine("Data", roundFileName);

                    if (File.Exists(roundFilePath))
                    {
                        processor.ProcessRoundResults(roundFilePath);
                        Console.WriteLine("Matches have been processed.");
                    }
                    else
                    {
                        Console.WriteLine("Round file not found. Please check the file name.");
                    }
                    break;

                case 3:
                    // Display current league standings
                    processor.DisplayCurrentStandings();
                    break;

                case 4:
// Simulation af alle kampe
// Test om det virker
Console.Write("Simulate all matches? (y/n): ");
string simulateAllMatches = Console.ReadLine();

if (simulateAllMatches.ToLower() == "y")
{
    //"Data" for alle .csv filer
    string dataDirectory = "Data";
    string[] roundFiles = Directory.GetFiles(dataDirectory, "round-*.csv");

    if (roundFiles.Length == 0)
    {
        Console.WriteLine("No round files found in the 'Data' directory.");
    }
    else
    {
        // Sort the round files by their names to ensure processing in order
        Array.Sort(roundFiles);

        foreach (string currentRoundFilePath in roundFiles)
        {
            processor.ProcessRoundResults(currentRoundFilePath);
            Console.WriteLine($"Matches in {Path.GetFileName(currentRoundFilePath)} have been processed.");
        }
    }
}
else
{
    Console.WriteLine("Simulation canceled.");
}

                    break;

                case 5:
                    // Exit the application
                    exit = true;
                    break;

                default:
                    Console.WriteLine("Invalid choice. Please select a valid option.");
                    break;
            }
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid menu choice.");
        }
    }
}
}
