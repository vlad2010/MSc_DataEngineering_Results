My footballprocessor.cs using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class FootballProcessor
{
    private List<Team> originalTeams;
    private LeagueSetup leagueSetup;

    public FootballProcessor(List<Team> teams, LeagueSetup leagueSetup)
    {
        this.originalTeams = teams;
        this.leagueSetup = leagueSetup;
        ResetTeamStatistics();
    }

    public void ProcessRoundResults(string roundFilePath)
    {
        List<MatchResult> matchResults = MatchResultProcessor.ReadMatchResults(roundFilePath);

        foreach (var matchResult in matchResults)
        {
            Team homeTeam = originalTeams.Find(team => team.Abbreviation == matchResult.HomeTeam);
            Team awayTeam = originalTeams.Find(team => team.Abbreviation == matchResult.AwayTeam);

            if (homeTeam != null && awayTeam != null)
            {
                UpdateTeamStatistics(homeTeam, awayTeam, matchResult);
            }
        }

        CalculateStandings();
    }

    private void UpdateTeamStatistics(Team homeTeam, Team awayTeam, MatchResult matchResult)
    {
        homeTeam.GamesPlayed++;
        awayTeam.GamesPlayed++;
        homeTeam.GoalsFor += matchResult.HomeTeamGoals;
        homeTeam.GoalsAgainst += matchResult.AwayTeamGoals;
        awayTeam.GoalsFor += matchResult.AwayTeamGoals;
        awayTeam.GoalsAgainst += matchResult.HomeTeamGoals;

        UpdatePoints(homeTeam, awayTeam, matchResult);
        UpdateStreak(homeTeam, awayTeam, matchResult);
    }

    private void UpdatePoints(Team homeTeam, Team awayTeam, MatchResult matchResult)
    {
        if (matchResult.HomeTeamGoals > matchResult.AwayTeamGoals)
        {
            homeTeam.Points += 3;
            homeTeam.GamesWon++;
            awayTeam.GamesLost++;
        }
        else if (matchResult.HomeTeamGoals < matchResult.AwayTeamGoals)
        {
            awayTeam.Points += 3;
            awayTeam.GamesWon++;
            homeTeam.GamesLost++;
        }
        else
        {
            homeTeam.Points += 1;
            awayTeam.Points += 1;
            homeTeam.GamesDrawn++;
            awayTeam.GamesDrawn++;
        }
    }

    private void CalculateStandings()
    {
        var orderedStandings = originalTeams.OrderByDescending(team => team.Points)
                                    .ThenByDescending(team => team.GoalDifference)
                                    .ThenByDescending(team => team.GoalsFor)
                                    .ToList();

        for (int i = 0; i < orderedStandings.Count; i++)
        {
            orderedStandings[i].Position = i + 1;
        }
    }

    private void UpdateStreak(Team homeTeam, Team awayTeam, MatchResult matchResult)
    {
        bool homeTeamWon = matchResult.HomeTeamGoals > matchResult.AwayTeamGoals;
        bool awayTeamWon = matchResult.AwayTeamGoals > matchResult.HomeTeamGoals;
        bool isDraw = matchResult.HomeTeamGoals == matchResult.AwayTeamGoals;

        UpdateStreakForTeam(homeTeam, homeTeamWon, isDraw);
        UpdateStreakForTeam(awayTeam, awayTeamWon, isDraw);
    }

    private void UpdateStreakForTeam(Team team, bool won, bool isDraw)
    {
        if (won)
        {
            team.CurrentStreak.Wins++;
            team.CurrentStreak.Draws = 0;
            team.CurrentStreak.Losses = 0;
        }
        else if (isDraw)
        {
            team.CurrentStreak.Draws++;
            team.CurrentStreak.Wins = 0;
            team.CurrentStreak.Losses = 0;
        }
        else
        {
            team.CurrentStreak.Losses++;
            team.CurrentStreak.Wins = 0;
            team.CurrentStreak.Draws = 0;
        }
    }

    public void DisplayCurrentStandings()
    {
        var orderedStandings = originalTeams.OrderByDescending(team => team.Points)
                                    .ThenByDescending(team => team.GoalDifference)
                                    .ThenByDescending(team => team.GoalsFor)
                                    .ToList();

        Console.WriteLine("League Standings:");
        Console.WriteLine("{0,-5} {1,-35} {2,-5} {3,-5} {4,-5} {5,-5} {6,-5} {7,-5} {8,-5} {9,-5} {10,-15}",
                          "Pos", "Team", "Pts", "GP", "W", "D", "L", "GF", "GA", "GD", "Streak");

        for (int i = 0; i < orderedStandings.Count; i++)
        {
            var team = orderedStandings[i];
            string specialMarking = GetSpecialMarking(i + 1);

            string teamName = $"{team.Position} {specialMarking} {team.FullName}";
            if (teamName.Length > 35)
            {
                teamName = teamName.Substring(0, 32) + "...";
            }

            string streakText = $"Wins: {team.CurrentStreak.Wins}, Draws: {team.CurrentStreak.Draws}, Losses: {team.CurrentStreak.Losses}";

            string textColor = GetTextColor(i + 1);
            Console.Write("\u001b[0m");
            Console.Write($"\u001b[{textColor}m");

            Console.WriteLine($"{team.Position,-5} {teamName,-35} {team.Points,-5} {team.GamesPlayed,-5} {team.GamesWon,-5} {team.GamesDrawn,-5} {team.GamesLost,-5} {team.GoalsFor,-5} {team.GoalsAgainst,-5} {team.GoalDifference,-5} {streakText,-15}");

            Console.Write("\u001b[0m");
        }
    }

    private void ResetTeamStatistics()
    {
        foreach (var team in originalTeams)
        {
            team.GamesPlayed = 0;
            team.GamesWon = 0;
            team.GamesDrawn = 0;
            team.GamesLost = 0;
            team.GoalsFor = 0;
            team.GoalsAgainst = 0;
            team.Points = 0;
            team.CurrentStreak.Wins = 0;
            team.CurrentStreak.Draws = 0;
            team.CurrentStreak.Losses = 0;
        }
    }

    private string GetTextColor(int position)
    {
        if (position == 1)
            return "32";
        if (position <= leagueSetup.PromoteToChampionsLeague)
            return "36";
        if (position >= originalTeams.Count - leagueSetup.RelegateToLowerLeague)
            return "31";
        return "0";
    }

    private string GetSpecialMarking(int position)
    {
        if (position <= leagueSetup.PromoteToChampionsLeague)
            return "(CL)";
        if (position <= (leagueSetup.PromoteToChampionsLeague + leagueSetup.PromoteToEuropeLeague))
            return "(EL)";
        if (position <= (leagueSetup.PromoteToChampionsLeague + leagueSetup.PromoteToEuropeLeague + leagueSetup.PromoteToConferenceLeague))
            return "(EC)";
        return "";
    }
}
program.cs using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
{
    // Load setup data from setup.csv
    string setupFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\setup.csv";
    LeagueSetup leagueSetup = LeagueSetup.ParseSetupCsv(setupFilePath);

    if (leagueSetup == null)
    {
        Console.WriteLine("Unable to load league setup. Exiting...");
        return;
    }

    // Load team data from teams.csv
    string teamFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\teams.csv";
    List<Team> teams = FootballCsvReader.ReadCsv(teamFilePath);

    if (teams == null)
    {
        Console.WriteLine("Unable to load team data. Exiting...");
        return;
    }

    // Create an instance of FootballProcessor
    FootballProcessor processor = new FootballProcessor(teams, leagueSetup);

    bool exit = false;
    while (!exit)
    {
        Console.WriteLine("Football Processor Menu:");
        Console.WriteLine("1. Print Teams");
        Console.WriteLine("2. Run Matches");
        Console.WriteLine("3. Display Current League Standings");
        Console.WriteLine("4. Simulate all matches");
        Console.WriteLine("5. Exit");
        Console.Write("Enter your choice: ");

        if (int.TryParse(Console.ReadLine(), out int choice))
        {
            switch (choice)
            {
                case 1:
                    // Print teams and their details
                    foreach (var team in teams)
                    {
                        Console.WriteLine($"Abbreviation: {team.Abbreviation}");
                        Console.WriteLine($"Full Name: {team.FullName}");
                        Console.WriteLine($"Special Ranking: {team.SpecialRanking}");
                        Console.WriteLine($"Position: {team.Position}");
                        Console.WriteLine($"Games Played: {team.GamesPlayed}");
                        Console.WriteLine($"Games Won: {team.GamesWon}");
                        Console.WriteLine($"Games Drawn: {team.GamesDrawn}");
                        Console.WriteLine($"Games Lost: {team.GamesLost}");
                        Console.WriteLine($"Goals For: {team.GoalsFor}");
                        Console.WriteLine($"Goals Against: {team.GoalsAgainst}");
                        Console.WriteLine($"Goal Difference: {team.GoalDifference}");
                        Console.WriteLine($"Points: {team.Points}");
                        Console.WriteLine($"Current Streak: {team.CurrentStreak}");
                        Console.WriteLine();
                    }
                    break;

                case 2:
                    // Implement logic to run matches based on round files
                    Console.Write("Enter the round file name (e.g., round-1.csv): ");
                    string roundFileName = Console.ReadLine();
                    string roundFilePath = Path.Combine("Data", roundFileName);

                    if (File.Exists(roundFilePath))
                    {
                        processor.ProcessRoundResults(roundFilePath);
                        Console.WriteLine("Matches have been processed.");
                    }
                    else
                    {
                        Console.WriteLine("Round file not found. Please check the file name.");
                    }
                    break;

                case 3:
                    // Display current league standings
                    processor.DisplayCurrentStandings();
                    break;

                case 4:
// Simulation af alle kampe
// Test om det virker
Console.Write("Simulate all matches? (y/n): ");
string simulateAllMatches = Console.ReadLine();

if (simulateAllMatches.ToLower() == "y")
{
    //"Data" for alle .csv filer
    string dataDirectory = "Data";
    string[] roundFiles = Directory.GetFiles(dataDirectory, "round-*.csv");

    if (roundFiles.Length == 0)
    {
        Console.WriteLine("No round files found in the 'Data' directory.");
    }
    else
    {
        // Sort the round files by their names to ensure processing in order
        Array.Sort(roundFiles);

        foreach (string currentRoundFilePath in roundFiles)
        {
            processor.ProcessRoundResults(currentRoundFilePath);
            Console.WriteLine($"Matches in {Path.GetFileName(currentRoundFilePath)} have been processed.");
        }
    }
}
else
{
    Console.WriteLine("Simulation canceled.");
}

                    break;

                case 5:
                    // Exit the application
                    exit = true;
                    break;

                default:
                    Console.WriteLine("Invalid choice. Please select a valid option.");
                    break;
            }
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid menu choice.");
        }
    }
}
}
