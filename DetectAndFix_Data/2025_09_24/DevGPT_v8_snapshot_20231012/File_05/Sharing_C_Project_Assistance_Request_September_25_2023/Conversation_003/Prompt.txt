LeagueStadings.cs using System;
using System.Collections.Generic;
using System.Linq;

public class LeagueStandings
{
    private List<Team> teams;

    public LeagueStandings(List<Team> teams)
    {
        this.teams = teams;
    }

    public List<Team> CalculateStandings()
    {
        var orderedStandings = teams.OrderByDescending(team => team.Points)
                                    .ThenByDescending(team => team.GoalDifference)
                                    .ThenByDescending(team => team.GoalsFor)
                                    .ToList();

        for (int i = 0; i < orderedStandings.Count; i++)
        {
            orderedStandings[i].Position = i + 1;
        }

        return orderedStandings;
    }

public void PrintStandings()
{
    var standings = CalculateStandings();

    Console.WriteLine("League Standings:");
    Console.WriteLine("{0,-5} {1,-25} {2,-10} {3,-10} {4,-10} {5,-10} {6,-10} {7,-10} {8,-10} {9,-10} {10,-10}",
                      "Pos", "Team", "Pts", "GP", "W", "D", "L", "GF", "GA", "GD", "Streak");

    foreach (var team in standings)
    {
        string specialMarking = "";

        // Add special marking for CL, EL, EC qualification
        if (team.Position <= 1)
            specialMarking = "(CL)";
        else if (team.Position <= 3)
            specialMarking = "(EL)";
        else if (team.Position <= 6)
            specialMarking = "(EC)";

        // Add coloring for relegation-threatened teams
        string textColor = "white";
        if (team.Position >= teams.Count - 1)
            textColor = "red";

        Console.WriteLine($"<color={textColor}>{team.Position,-5} {specialMarking} {team.FullName,-25} {team.Points,-10} {team.GamesPlayed,-10} {team.GamesWon,-10} {team.GamesDrawn,-10} {team.GamesLost,-10} {team.GoalsFor,-10} {team.GoalsAgainst,-10} {team.GoalDifference,-10} {team.CurrentStreak,-10}</color>");
    }
}
}
