`NanoLogger` 的状态（`m_state`）主要用于控制后台线程的行为。当 `NanoLogger` 对象被创建时，状态被设置为 `INIT`。然后，构造函数结束时，状态被设置为 `READY`。这意味着后台线程可以开始从缓冲区中读取并写入日志。最后，当 `NanoLogger` 对象被销毁时，状态被设置为 `SHUTDOWN`，通知后台线程退出。

后台线程运行 `pop` 函数，这个函数根据状态执行不同的行为：

- 如果状态是 `INIT`，那么 `pop` 函数会让线程睡眠一小段时间（50微秒），然后重试。这是为了等待 `NanoLogger` 对象初始化完成。

- 如果状态是 `READY`，那么 `pop` 函数会尝试从缓冲区中读取日志。如果缓冲区为空，那么 `pop` 函数会让线程睡眠一小段时间（50微秒），然后重试。

- 如果状态是 `SHUTDOWN`，那么 `pop` 函数会读取并写入所有剩余的日志，然后退出。

在你的应用代码中，当你调用日志宏（如 `LOG_INFO`）时，会通过 `add` 函数将日志写入到缓冲区。这可以在 `NanoLogger` 的任何状态下发生。但是，只有当状态是 `READY` 时，后台线程才会从缓冲区中读取并写入日志。