`NanoLogger` 类是这个日志系统的核心部分。它管理了日志的生产者（即将日志行添加到缓冲区的代码部分）和消费者（即从缓冲区中读取并写入文件的后台线程）。

当你创建一个 `NanoLogger` 对象时，会根据参数创建一个环形缓冲区 (`RingBuffer`) 或队列缓冲区 (`QueueBuffer`)，并启动一个后台线程，这个线程运行 `pop` 函数，从缓冲区中读取日志行并写入到日志文件中。

`NanoLogger` 的工作模式可以概括为以下几步：

1. `add` 函数将日志行添加到缓冲区。这通常在你的应用代码中调用日志宏（如 `LOG_INFO`）时发生。

2. 后台线程运行 `pop` 函数，从缓冲区中读取日志行。如果缓冲区为空，那么这个线程会睡眠一小段时间（50微秒）然后重试。

3. `pop` 函数将读取到的日志行传递给 `FileWriter` 对象，`FileWriter` 对象将日志行写入到日志文件中。

4. 当 `NanoLogger` 对象被销毁时，它会将状态设置为 `SHUTDOWN`，然后等待后台线程完成当前的任务并退出。

注意，`NanoLogger` 类使用了 `std::atomic` 和 `std::thread`，这是 C++11 中引入的并发编程特性。`std::atomic` 保证了在多线程环境中对状态的读写操作是线程安全的，`std::thread` 提供了对线程的管理。