yea but when I simulate the matches I sitll get this League Standings:
Pos   Team                                Pts   GP    W     D     L     GF    GA    GD    Streak
1     1 (CL) FC København                 64    27    20    4     3     44    27    17    Wins: 3, Draws: 0, Losses: 0
2     2 (EL) Randers FC                   53    33    13    14    6     36    29    7     Wins: 1, Draws: 0, Losses: 0
3     3 (EL) Esbjerg fB                   30    28    4     18    6     36    38    -2    Wins: 0, Draws: 0, Losses: 3
4     4 (EC) Odense Boldklub              25    22    5     10    7     30    32    -2    Wins: 0, Draws: 1, Losses: 0
5     5 (EC) Viborg FF                    25    28    4     13    11    30    39    -9    Wins: 0, Draws: 0, Losses: 1
6     6 (EC) Aalborg BK                   24    22    4     12    6     31    33    -2    Wins: 0, Draws: 0, Losses: 1
7     7  FC Midtjylland                   19    11    5     4     2     11    8     3     Wins: 1, Draws: 0, Losses: 0
8     8  Aarhus GF                        17    21    2     11    8     23    27    -4    Wins: 0, Draws: 0, Losses: 1
9     9  Hobro IK                         17    20    2     11    7     23    28    -5    Wins: 0, Draws: 2, Losses: 0
10    10  Silkeborg IF                    16    19    0     16    3     24    27    -3    Wins: 0, Draws: 7, Losses: 0
11    11  Brøndby IF                      10    7     3     1     3     10    10    0     Wins: 1, Draws: 0, Losses: 0
Football Processor Menu:
1. Print Teams
2. Run Matches I think its the method there is something wrong with  This is my program.cs using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
{
    // Load setup data from setup.csv
    string setupFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\setup.csv";
    LeagueSetup leagueSetup = LeagueSetup.ParseSetupCsv(setupFilePath);

    if (leagueSetup == null)
    {
        Console.WriteLine("Unable to load league setup. Exiting...");
        return;
    }

    // Load team data from teams.csv
    string teamFilePath = @"C:\Users\kutuk\hey\Football-standings\FootballStandings\Data\teams.csv";
    List<Team> teams = FootballCsvReader.ReadCsv(teamFilePath);

    if (teams == null)
    {
        Console.WriteLine("Unable to load team data. Exiting...");
        return;
    }

    // Create an instance of FootballProcessor
    FootballProcessor processor = new FootballProcessor(teams, leagueSetup);

    bool exit = false;
    while (!exit)
    {
        Console.WriteLine("Football Processor Menu:");
        Console.WriteLine("1. Print Teams");
        Console.WriteLine("2. Run Matches");
        Console.WriteLine("3. Display Current League Standings");
        Console.WriteLine("4. Simulate all matches");
        Console.WriteLine("5. Exit");
        Console.Write("Enter your choice: ");

        if (int.TryParse(Console.ReadLine(), out int choice))
        {
            switch (choice)
            {
                case 1:
                    // Print teams and their details
                    foreach (var team in teams)
                    {
                        Console.WriteLine($"Abbreviation: {team.Abbreviation}");
                        Console.WriteLine($"Full Name: {team.FullName}");
                        Console.WriteLine($"Special Ranking: {team.SpecialRanking}");
                        Console.WriteLine($"Position: {team.Position}");
                        Console.WriteLine($"Games Played: {team.GamesPlayed}");
                        Console.WriteLine($"Games Won: {team.GamesWon}");
                        Console.WriteLine($"Games Drawn: {team.GamesDrawn}");
                        Console.WriteLine($"Games Lost: {team.GamesLost}");
                        Console.WriteLine($"Goals For: {team.GoalsFor}");
                        Console.WriteLine($"Goals Against: {team.GoalsAgainst}");
                        Console.WriteLine($"Goal Difference: {team.GoalDifference}");
                        Console.WriteLine($"Points: {team.Points}");
                        Console.WriteLine($"Current Streak: {team.CurrentStreak}");
                        Console.WriteLine();
                    }
                    break;

                case 2:
                    // Implement logic to run matches based on round files
                    Console.Write("Enter the round file name (e.g., round-1.csv): ");
                    string roundFileName = Console.ReadLine();
                    string roundFilePath = Path.Combine("Data", roundFileName);

                    if (File.Exists(roundFilePath))
                    {
                        processor.ProcessRoundResults(roundFilePath);
                        Console.WriteLine("Matches have been processed.");
                    }
                    else
                    {
                        Console.WriteLine("Round file not found. Please check the file name.");
                    }
                    break;

                case 3:
                    // Display current league standings
                    processor.DisplayCurrentStandings();
                    break;

                case 4:
// Simulation af alle kampe
// Test om det virker
Console.Write("Simulate all matches? (y/n): ");
string simulateAllMatches = Console.ReadLine();

if (simulateAllMatches.ToLower() == "y")
{
    //"Data" for alle .csv filer
    string dataDirectory = "Data";
    string[] roundFiles = Directory.GetFiles(dataDirectory, "round-*.csv");

    if (roundFiles.Length == 0)
    {
        Console.WriteLine("No round files found in the 'Data' directory.");
    }
    else
    {
        // Sort the round files by their names to ensure processing in order
        Array.Sort(roundFiles);

        foreach (string currentRoundFilePath in roundFiles)
        {
            processor.ProcessRoundResults(currentRoundFilePath);
            Console.WriteLine($"Matches in {Path.GetFileName(currentRoundFilePath)} have been processed.");
        }
    }
}
else
{
    Console.WriteLine("Simulation canceled.");
}

                    break;

                case 5:
                    // Exit the application
                    exit = true;
                    break;

                default:
                    Console.WriteLine("Invalid choice. Please select a valid option.");
                    break;
            }
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid menu choice.");
        }
    }
}
}
